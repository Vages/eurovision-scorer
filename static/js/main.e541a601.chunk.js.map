{"version":3,"sources":["nameToCountryCode.ts","CountryButton.tsx","Firebase.ts","participatingCountries.ts","Voting.tsx","DndVoting.tsx","ScoreBoard.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["s","Afghanistan","Albania","Algeria","American Samoa","Andorra","Angola","Anguilla","Antarctica","Antigua and Barbuda","Argentina","Armenia","Aruba","Australia","Austria","Azerbaijan","Bahamas","Bahrain","Bangladesh","Barbados","Belarus","Belgium","Belize","Benin","Bermuda","Bhutan","Bolivia","Bonaire","Bosnia and Herzegovina","Botswana","Bouvet Island","Brazil","British Indian Ocean Territory","Brunei Darussalam","Bulgaria","Burkina Faso","Burundi","Cambodia","Cameroon","Canada","Cape Verde","Cayman Islands","Central African Republic","Chad","Chile","China","Christmas Island","Cocos (Keeling) Islands","Colombia","Comoros","Congo","Democratic Republic of the Congo","Cook Islands","Costa Rica","Croatia","Cuba","Curacao","Cyprus","Czech Republic","Cote d'Ivoire","Denmark","Djibouti","Dominica","Dominican Republic","Ecuador","Egypt","El Salvador","Equatorial Guinea","Eritrea","Estonia","Ethiopia","Falkland Islands (Malvinas)","Faroe Islands","Fiji","Finland","France","French Guiana","French Polynesia","French Southern Territories","Gabon","Gambia","Georgia","Germany","Ghana","Gibraltar","Greece","Greenland","Grenada","Guadeloupe","Guam","Guatemala","Guernsey","Guinea","Guinea-Bissau","Guyana","Haiti","Heard Island and McDonald Islands","Holy See (Vatican City State)","Honduras","Hong Kong","Hungary","Iceland","India","Indonesia","Iran, Islamic Republic of","Iraq","Ireland","Isle of Man","Israel","Italy","Jamaica\tJM\tJAM","Japan","Jersey","Jordan","Kazakhstan","Kenya","Kiribati","Korea, Democratic People's Republic of  ","Korea, Republic of","Kuwait","Kyrgyzstan","Laos","Latvia","Lebanon","Lesotho","Liberia","Libya","Liechtenstein","Lithuania","Luxembourg","Macao","North Macedonia","Madagascar","Malawi","Malaysia","Maldives","Mali","Malta","Marshall Islands","Martinique","Mauritania","Mauritius","Mayotte","Mexico","Micronesia, Federated States of","Moldova","Monaco","Mongolia","Montenegro","Montserrat","Morocco","Mozambique","Myanmar","Namibia","Nauru","Nepal","Netherlands","New Caledonia","New Zealand","Nicaragua","Niger","Nigeria","Niue","Norfolk Island","Northern Mariana Islands","Norway","Oman","Pakistan","Palau","Palestine","Panama","Papua New Guinea","Paraguay","Peru","Philippines","Pitcairn","Poland","Portugal","Puerto Rico","Qatar","Romania","Russia","Rwanda","Reunion","Saint Barthelemy","Saint Helena","Saint Kitts and Nevis","Saint Lucia","Saint Martin (French part)","Saint Pierre and Miquelon","Saint Vincent and the Grenadines","Samoa","San Marino","Sao Tome and Principe","Saudi Arabia","Senegal","Serbia","Seychelles","Sierra Leone","Singapore","Sint Maarten (Dutch part)","Slovakia","Slovenia","Solomon Islands","Somalia","South Africa","South Georgia and the South Sandwich Islands","South Sudan","Spain","Sri Lanka","Sudan","Suriname","Svalbard and Jan Mayen","Swaziland","Sweden","Switzerland","Syrian Arab Republic","Taiwan","Tajikistan","United Republic of Tanzania","Thailand","Timor-Leste","Togo","Tokelau","Tonga","Trinidad and Tobago","Tunisia","Turkey","Turkmenistan","Turks and Caicos Islands","Tuvalu","Uganda","Ukraine","United Arab Emirates","United Kingdom","United States","United States Minor Outlying Islands","Uruguay","Uzbekistan","Vanuatu","Venezuela","Viet Nam","British Virgin Islands","US Virgin Islands","Wallis and Futuna","Western Sahara","Yemen","Zambia","Zimbabwe","CountryButton","_ref","name","onClick","disabled","flag","concat","nameToCountryCode","toLowerCase","react_default","a","createElement","type","className","src","alt","firebase","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","db","participatingCountries","Voting","_useState","useState","_useState2","Object","slicedToArray","votes","setVotes","_useState3","_useState4","points","setPoints","_useState5","_useState6","userName","setUserName","_points","toArray","nextPoint","restPoints","slice","_useState7","_useState8","postSucceeded","setPostSucceeded","countriesWithVotes","values","awardedAllPoints","scoresIsEmpty","keys","length","entries","sort","b","parseInt","reverse","map","_ref2","point","country","key","toString","lastScore","Math","min","apply","toConsumableArray","otherVotes","objectWithoutProperties","_toPropertyKey","countries","c","includes","objectSpread","defineProperty","Fragment","value","onChange","e","target","asyncToGenerator","regenerator_default","mark","_callee","wrap","_context","prev","next","collection","add","then","docRef","console","log","id","catch","error","stop","pointsInOrder","getCountries","countryName","index","DndVoting","props","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","items","onDragEnd","bind","assertThisInitialized","result","destination","list","startIndex","endIndex","Array","from","_result$splice","splice","removed","reorder","source","setState","_this2","_this$state","style","margin","textAlign","react_beautiful_dnd_esm","droppableId","provided","snapshot","assign","droppableProps","ref","innerRef","isDraggingOver","background","padding","width","item","draggableId","isDragging","draggableStyle","marginBottom","grid","draggableProps","dragHandleProps","userSelect","placeholder","reduce","accumulator","Component","ScoreBoard","allVotes","setAllVotes","voteSteps","setVoteSteps","useEffect","get","querySnapshot","scoresAndUsers","forEach","d","push","data","votingState","soFar","ouv","_ref3","_ref4","tempAccum","_ref7","_ref8","myVoteStep","voteTally","usersVotes","votingUserName","countryList","_ref10","_ref11","points1","_ref14","_ref15","score","isLatestVote","max","App","react_router_dom","basename","process","react_router","path","exact","component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.e541a601.chunk.js","sourcesContent":["interface NameToCountryCode {\n  [countryName: string]: string;\n}\n\nconst s: NameToCountryCode = {\n  Afghanistan: \"AF\",\n  Albania: \"AL\",\n  Algeria: \"DZ\",\n  \"American Samoa\": \"AS\",\n  Andorra: \"AD\",\n  Angola: \"AO\",\n  Anguilla: \"AI\",\n  Antarctica: \"AQ\",\n  \"Antigua and Barbuda\": \"AG\",\n  Argentina: \"AR\",\n  Armenia: \"AM\",\n  Aruba: \"AW\",\n  Australia: \"AU\",\n  Austria: \"AT\",\n  Azerbaijan: \"AZ\",\n  Bahamas: \"BS\",\n  Bahrain: \"BH\",\n  Bangladesh: \"BD\",\n  Barbados: \"BB\",\n  Belarus: \"BY\",\n  Belgium: \"BE\",\n  Belize: \"BZ\",\n  Benin: \"BJ\",\n  Bermuda: \"BM\",\n  Bhutan: \"BT\",\n  Bolivia: \"BO\",\n  Bonaire: \"BQ\",\n  \"Bosnia and Herzegovina\": \"BA\",\n  Botswana: \"BW\",\n  \"Bouvet Island\": \"BV\",\n  Brazil: \"BR\",\n  \"British Indian Ocean Territory\": \"IO\",\n  \"Brunei Darussalam\": \"BN\",\n  Bulgaria: \"BG\",\n  \"Burkina Faso\": \"BF\",\n  Burundi: \"BI\",\n  Cambodia: \"KH\",\n  Cameroon: \"CM\",\n  Canada: \"CA\",\n  \"Cape Verde\": \"CV\",\n  \"Cayman Islands\": \"KY\",\n  \"Central African Republic\": \"CF\",\n  Chad: \"TD\",\n  Chile: \"CL\",\n  China: \"CN\",\n  \"Christmas Island\": \"CX\",\n  \"Cocos (Keeling) Islands\": \"CC\",\n  Colombia: \"CO\",\n  Comoros: \"KM\",\n  Congo: \"CG\",\n  \"Democratic Republic of the Congo\": \"CD\",\n  \"Cook Islands\": \"CK\",\n  \"Costa Rica\": \"CR\",\n  Croatia: \"HR\",\n  Cuba: \"CU\",\n  Curacao: \"CW\",\n  Cyprus: \"CY\",\n  \"Czech Republic\": \"CZ\",\n  \"Cote d'Ivoire\": \"CI\",\n  Denmark: \"DK\",\n  Djibouti: \"DJ\",\n  Dominica: \"DM\",\n  \"Dominican Republic\": \"DO\",\n  Ecuador: \"EC\",\n  Egypt: \"EG\",\n  \"El Salvador\": \"SV\",\n  \"Equatorial Guinea\": \"GQ\",\n  Eritrea: \"ER\",\n  Estonia: \"EE\",\n  Ethiopia: \"ET\",\n  \"Falkland Islands (Malvinas)\": \"FK\",\n  \"Faroe Islands\": \"FO\",\n  Fiji: \"FJ\",\n  Finland: \"FI\",\n  France: \"FR\",\n  \"French Guiana\": \"GF\",\n  \"French Polynesia\": \"PF\",\n  \"French Southern Territories\": \"TF\",\n  Gabon: \"GA\",\n  Gambia: \"GM\",\n  Georgia: \"GE\",\n  Germany: \"DE\",\n  Ghana: \"GH\",\n  Gibraltar: \"GI\",\n  Greece: \"GR\",\n  Greenland: \"GL\",\n  Grenada: \"GD\",\n  Guadeloupe: \"GP\",\n  Guam: \"GU\",\n  Guatemala: \"GT\",\n  Guernsey: \"GG\",\n  Guinea: \"GN\",\n  \"Guinea-Bissau\": \"GW\",\n  Guyana: \"GY\",\n  Haiti: \"HT\",\n  \"Heard Island and McDonald Islands\": \"HM\",\n  \"Holy See (Vatican City State)\": \"VA\",\n  Honduras: \"HN\",\n  \"Hong Kong\": \"HK\",\n  Hungary: \"HU\",\n  Iceland: \"IS\",\n  India: \"IN\",\n  Indonesia: \"ID\",\n  \"Iran, Islamic Republic of\": \"IR\",\n  Iraq: \"IQ\",\n  Ireland: \"IE\",\n  \"Isle of Man\": \"IM\",\n  Israel: \"IL\",\n  Italy: \"IT\",\n  \"Jamaica\tJM\tJAM\": \"JM\",\n  Japan: \"JP\",\n  Jersey: \"JE\",\n  Jordan: \"JO\",\n  Kazakhstan: \"KZ\",\n  Kenya: \"KE\",\n  Kiribati: \"KI\",\n  \"Korea, Democratic People's Republic of  \": \"KP\",\n  \"Korea, Republic of\": \"KR\",\n  Kuwait: \"KW\",\n  Kyrgyzstan: \"KG\",\n  Laos: \"LA\",\n  Latvia: \"LV\",\n  Lebanon: \"LB\",\n  Lesotho: \"LS\",\n  Liberia: \"LR\",\n  Libya: \"LY\",\n  Liechtenstein: \"LI\",\n  Lithuania: \"LT\",\n  Luxembourg: \"LU\",\n  Macao: \"MO\",\n  \"North Macedonia\": \"MK\",\n  Madagascar: \"MG\",\n  Malawi: \"MW\",\n  Malaysia: \"MY\",\n  Maldives: \"MV\",\n  Mali: \"ML\",\n  Malta: \"MT\",\n  \"Marshall Islands\": \"MH\",\n  Martinique: \"MQ\",\n  Mauritania: \"MR\",\n  Mauritius: \"MU\",\n  Mayotte: \"YT\",\n  Mexico: \"MX\",\n  \"Micronesia, Federated States of\": \"FM\",\n  Moldova: \"MD\",\n  Monaco: \"MC\",\n  Mongolia: \"MN\",\n  Montenegro: \"ME\",\n  Montserrat: \"MS\",\n  Morocco: \"MA\",\n  Mozambique: \"MZ\",\n  Myanmar: \"MM\",\n  Namibia: \"NA\",\n  Nauru: \"NR\",\n  Nepal: \"NP\",\n  Netherlands: \"NL\",\n  \"New Caledonia\": \"NC\",\n  \"New Zealand\": \"NZ\",\n  Nicaragua: \"NI\",\n  Niger: \"NE\",\n  Nigeria: \"NG\",\n  Niue: \"NU\",\n  \"Norfolk Island\": \"NF\",\n  \"Northern Mariana Islands\": \"MP\",\n  Norway: \"NO\",\n  Oman: \"OM\",\n  Pakistan: \"PK\",\n  Palau: \"PW\",\n  Palestine: \"PS\",\n  Panama: \"PA\",\n  \"Papua New Guinea\": \"PG\",\n  Paraguay: \"PY\",\n  Peru: \"PE\",\n  Philippines: \"PH\",\n  Pitcairn: \"PN\",\n  Poland: \"PL\",\n  Portugal: \"PT\",\n  \"Puerto Rico\": \"PR\",\n  Qatar: \"QA\",\n  Romania: \"RO\",\n  Russia: \"RU\",\n  Rwanda: \"RW\",\n  Reunion: \"RE\",\n  \"Saint Barthelemy\": \"BL\",\n  \"Saint Helena\": \"SH\",\n  \"Saint Kitts and Nevis\": \"KN\",\n  \"Saint Lucia\": \"LC\",\n  \"Saint Martin (French part)\": \"MF\",\n  \"Saint Pierre and Miquelon\": \"PM\",\n  \"Saint Vincent and the Grenadines\": \"VC\",\n  Samoa: \"WS\",\n  \"San Marino\": \"SM\",\n  \"Sao Tome and Principe\": \"ST\",\n  \"Saudi Arabia\": \"SA\",\n  Senegal: \"SN\",\n  Serbia: \"RS\",\n  Seychelles: \"SC\",\n  \"Sierra Leone\": \"SL\",\n  Singapore: \"SG\",\n  \"Sint Maarten (Dutch part)\": \"SX\",\n  Slovakia: \"SK\",\n  Slovenia: \"SI\",\n  \"Solomon Islands\": \"SB\",\n  Somalia: \"SO\",\n  \"South Africa\": \"ZA\",\n  \"South Georgia and the South Sandwich Islands\": \"GS\",\n  \"South Sudan\": \"SS\",\n  Spain: \"ES\",\n  \"Sri Lanka\": \"LK\",\n  Sudan: \"SD\",\n  Suriname: \"SR\",\n  \"Svalbard and Jan Mayen\": \"SJ\",\n  Swaziland: \"SZ\",\n  Sweden: \"SE\",\n  Switzerland: \"CH\",\n  \"Syrian Arab Republic\": \"SY\",\n  Taiwan: \"TW\",\n  Tajikistan: \"TJ\",\n  \"United Republic of Tanzania\": \"TZ\",\n  Thailand: \"TH\",\n  \"Timor-Leste\": \"TL\",\n  Togo: \"TG\",\n  Tokelau: \"TK\",\n  Tonga: \"TO\",\n  \"Trinidad and Tobago\": \"TT\",\n  Tunisia: \"TN\",\n  Turkey: \"TR\",\n  Turkmenistan: \"TM\",\n  \"Turks and Caicos Islands\": \"TC\",\n  Tuvalu: \"TV\",\n  Uganda: \"UG\",\n  Ukraine: \"UA\",\n  \"United Arab Emirates\": \"AE\",\n  \"United Kingdom\": \"GB\",\n  \"United States\": \"US\",\n  \"United States Minor Outlying Islands\": \"UM\",\n  Uruguay: \"UY\",\n  Uzbekistan: \"UZ\",\n  Vanuatu: \"VU\",\n  Venezuela: \"VE\",\n  \"Viet Nam\": \"VN\",\n  \"British Virgin Islands\": \"VG\",\n  \"US Virgin Islands\": \"VI\",\n  \"Wallis and Futuna\": \"WF\",\n  \"Western Sahara\": \"EH\",\n  Yemen: \"YE\",\n  Zambia: \"ZM\",\n  Zimbabwe: \"ZW\"\n};\n\nexport default s;\n","import React from \"react\";\nimport nameToCountryCode from \"./nameToCountryCode\";\n\ntype Props = {\n  name: string;\n  onClick: (event: React.MouseEvent<HTMLElement>) => void;\n  disabled: boolean;\n};\n\nexport default ({ name, onClick, disabled }: Props) => {\n  const flag = `flags/${nameToCountryCode[name].toLowerCase()}.png`;\n  return (\n    <button\n      type=\"button\"\n      className={`nes-btn is-primary ${disabled && \"is-disabled\"}`}\n      disabled={disabled}\n      onClick={onClick}\n    >\n      <img src={flag} className=\"flag\" alt={`Flag of ${name}`} />\n      <span className=\"nes-text\">{name}</span>\n    </button>\n  );\n};\n","import * as firebase from \"firebase/app\";\nimport \"firebase/firestore\";\n\nconst firebaseConfig = {\n  apiKey: \"AIzaSyDMXD0-q5wcY-YxL0CuIS86ibvQEeGpp8c\",\n  authDomain: \"eurovision-voter.firebaseapp.com\",\n  databaseURL: \"https://eurovision-voter.firebaseio.com\",\n  projectId: \"eurovision-voter\",\n  storageBucket: \"eurovision-voter.appspot.com\",\n  messagingSenderId: \"685398369353\",\n  appId: \"1:685398369353:web:d9f10d520a5cf65a\"\n};\n// Initialize Firebase\nfirebase.initializeApp(firebaseConfig);\n\nexport const db = firebase.firestore();\n","export default [\n  \"Malta\",\n  \"Albania\",\n  \"Czech Republic\",\n  \"Germany\",\n  \"Russia\",\n  \"Denmark\",\n  \"San Marino\",\n  \"North Macedonia\",\n  \"Sweden\",\n  \"Slovenia\",\n  \"Cyprus\",\n  \"Netherlands\",\n  \"Greece\",\n  \"Israel\",\n  \"Norway\",\n  \"United Kingdom\",\n  \"Iceland\",\n  \"Estonia\",\n  \"Belarus\",\n  \"Azerbaijan\",\n  \"France\",\n  \"Italy\",\n  \"Serbia\",\n  \"Switzerland\",\n  \"Australia\",\n  \"Spain\"\n];\n","import React, { useState } from \"react\";\nimport CountryButton from \"./CountryButton\";\nimport { db } from \"./Firebase\";\nimport countries from \"./participatingCountries\";\n\nconst Voting = () => {\n  const [votes, setVotes]: [{ [point: number]: string }, any] = useState([]);\n  const [points, setPoints] = useState([12, 10, 8, 7, 6, 5, 4, 3, 2, 1]);\n  const [userName, setUserName] = useState(\"\");\n\n  const [nextPoint, ...restPoints] = points;\n  const [postSucceeded, setPostSucceeded] = useState(false);\n\n  const countriesWithVotes: string[] = Object.values(votes);\n  const awardedAllPoints = !nextPoint;\n\n  const scoresIsEmpty = Object.keys(votes).length === 0;\n  return (\n    <div>\n      <div>\n        <table>\n          <tbody>\n            {Object.entries(votes)\n              .sort((a, b) => parseInt(a[0]) - parseInt(b[0]))\n              .reverse()\n              .map(([point, country]) => (\n                <tr key={point.toString() + country}>\n                  <td>{point}</td>\n                  <td>{country}</td>\n                </tr>\n              ))}\n          </tbody>\n        </table>\n      </div>\n      {!postSucceeded && (\n        <div>\n          <button\n            disabled={scoresIsEmpty}\n            className={`nes-btn is-error ${scoresIsEmpty && \"is-disabled\"}`}\n            onClick={() => {\n              if (votes) {\n                const lastScore = Math.min(\n                  ...Object.keys(votes).map(a => parseInt(a))\n                );\n                const { [lastScore]: foo, ...otherVotes } = votes;\n                const point = lastScore || 0;\n\n                setPoints([point, ...points]);\n                setVotes(otherVotes);\n              }\n            }}\n          >\n            Angre\n          </button>\n        </div>\n      )}\n      {nextPoint && (\n        <div>\n          <em>\n            {nextPoint} points\n            <br /> goes to\n          </em>\n        </div>\n      )}\n      {nextPoint && (\n        <div>\n          {countries.map(c => (\n            <CountryButton\n              key={c}\n              disabled={countriesWithVotes.includes(c)}\n              onClick={() => {\n                setPoints(restPoints);\n                setVotes({ ...votes, [nextPoint]: c });\n              }}\n              name={c}\n            />\n          ))}\n        </div>\n      )}\n      {postSucceeded ? (\n        <div>Sendte inn!</div>\n      ) : (\n        <React.Fragment>\n          {awardedAllPoints && (\n            <React.Fragment>\n              <div className=\"nes-field\">\n                <label>Navnet ditt</label>\n                <input\n                  value={userName}\n                  onChange={e => setUserName(e.target.value)}\n                  className=\"nes-input\"\n                  type=\"text\"\n                />\n              </div>\n              <button\n                className={`nes-btn is-primary ${!userName && \"is-disabled\"}`}\n                onClick={async () => {\n                  db.collection(\"user-votes\")\n                    .add({\n                      userName,\n                      votes\n                    })\n                    .then(function(docRef) {\n                      console.log(\"Document written with ID: \", docRef.id);\n                      setPostSucceeded(true);\n                    })\n                    .catch(function(error) {\n                      console.error(\"Error adding document: \", error);\n                    });\n                }}\n              >\n                Send inn\n              </button>\n            </React.Fragment>\n          )}\n        </React.Fragment>\n      )}\n    </div>\n  );\n};\n\nexport default Voting;\n","import React, { Component, CSSProperties } from \"react\";\nimport {\n  DragDropContext,\n  Draggable,\n  DraggableProvided,\n  DraggingStyle,\n  Droppable,\n  DropResult,\n  NotDraggingStyle\n} from \"react-beautiful-dnd\";\nimport countries from \"./participatingCountries\";\nimport nameToCountryCode from \"./nameToCountryCode\";\nimport { db } from \"./Firebase\";\n\n// a little function to help us with reordering the result\nconst reorder = (list: any[], startIndex: number, endIndex: number) => {\n  const result = Array.from(list);\n  const [removed] = result.splice(startIndex, 1);\n  result.splice(endIndex, 0, removed);\n\n  return result;\n};\n\nconst pointsInOrder = [12, 10, 8, 7, 6, 5, 4, 3, 2, 1];\n\nconst grid = 8;\n\nconst getItemStyle = (\n  isDragging: boolean,\n  draggableStyle: DraggingStyle | NotDraggingStyle | null | undefined\n): CSSProperties => ({\n  // some basic styles to make the items look a bit nicer\n  userSelect: \"none\",\n  padding: grid,\n  // margin: `0 0 ${grid}px 0`,\n\n  // change background colour if dragging\n  background: isDragging ? \"lightgreen\" : \"lightblue\",\n\n  // styles we need to apply on draggables\n  ...draggableStyle\n});\n\nconst getListStyle = (isDraggingOver: boolean) => ({\n  background: isDraggingOver ? \"lightblue\" : \"lightgrey\",\n  padding: grid,\n  width: 250,\n  margin: \"0 auto\"\n});\n\ntype Item = { id: string; countryName: string };\ntype State = { items: Item[]; userName: string; postSucceeded: boolean };\n\nconst getCountries = (): Item[] =>\n  countries.map((countryName, index) => ({ id: `item-${index}`, countryName }));\n\nclass DndVoting extends Component<any, State> {\n  constructor(props: Object) {\n    super(props);\n    this.state = {\n      items: getCountries(),\n      userName: \"\",\n      postSucceeded: false\n    };\n    this.onDragEnd = this.onDragEnd.bind(this);\n  }\n\n  onDragEnd(result: DropResult) {\n    // dropped outside the list\n    if (!result.destination) {\n      return;\n    }\n\n    const items = reorder(\n      this.state.items,\n      result.source.index,\n      result.destination.index\n    );\n\n    this.setState({\n      items\n    });\n  }\n\n  // Normally you would want to split things out into separate components.\n  // But in this example everything is just done in one place for simplicity\n  render() {\n    const { userName, items } = this.state;\n    return (\n      <div>\n        <h1 style={{ margin: \"1rem\" }}>Eurovision-finale 2019</h1>\n        <div style={{ textAlign: \"left\", margin: \"1rem\" }}>\n          <p>\n            Dra og slipp landene i rekkefølge. Du trenger ikke sortere de som\n            ikke får poeng.\n          </p>\n          <p>Sveip til bunnen for å skrive inn kallenavn og sende inn poeng.</p>\n        </div>\n        <DragDropContext onDragEnd={this.onDragEnd}>\n          <Droppable droppableId=\"droppable\">\n            {(provided, snapshot) => (\n              <div\n                {...provided.droppableProps}\n                ref={provided.innerRef}\n                style={getListStyle(snapshot.isDraggingOver)}\n              >\n                {items.map((item, index) => (\n                  <Draggable key={item.id} draggableId={item.id} index={index}>\n                    {(provided: DraggableProvided, snapshot) => {\n                      const flag = `flags/${nameToCountryCode[\n                        item.countryName\n                      ].toLowerCase()}.png`;\n                      return (\n                        <div\n                          style={{\n                            marginBottom: `${grid * 2}px`\n                          }}\n                        >\n                          <div\n                            className=\"nes-container is-rounded\"\n                            ref={provided.innerRef}\n                            {...provided.draggableProps}\n                            {...provided.dragHandleProps}\n                            style={getItemStyle(\n                              snapshot.isDragging,\n                              provided.draggableProps.style\n                            )}\n                          >\n                            <div>\n                              <img\n                                src={flag}\n                                className=\"flag\"\n                                alt={`Flag of ${item.countryName}`}\n                              />\n                              {item.countryName}\n                            </div>\n                            {pointsInOrder[index] && (\n                              <div\n                                className=\"nes-container is-rounded\"\n                                style={{\n                                  padding: \"0.1rem\",\n                                  background: \"#fff\"\n                                }}\n                              >\n                                {pointsInOrder[index]}\n                              </div>\n                            )}\n                          </div>\n                        </div>\n                      );\n                    }}\n                  </Draggable>\n                ))}\n                {provided.placeholder}\n              </div>\n            )}\n          </Droppable>\n        </DragDropContext>\n        <div style={{ margin: \"1rem\" }}>\n          {this.state.postSucceeded ? (\n            <div>Sendte inn!</div>\n          ) : (\n            <React.Fragment>\n              <div className=\"nes-field\" style={{ margin: \"1rem\" }}>\n                <label>Navnet ditt</label>\n                <input\n                  value={this.state.userName}\n                  onChange={e => this.setState({ userName: e.target.value })}\n                  className=\"nes-input\"\n                  type=\"text\"\n                />\n              </div>\n              <button\n                className={`nes-btn is-primary ${!userName && \"is-disabled\"}`}\n                style={{ marginBottom: \"8rem\" }}\n                onClick={async () => {\n                  const votes: {\n                    [point: number]: string;\n                  } = pointsInOrder.reduce(\n                    (accumulator, point, index) => ({\n                      ...accumulator,\n                      [point]: items[index].countryName\n                    }),\n                    {}\n                  );\n                  db.collection(\"user-votes\")\n                    .add({\n                      userName,\n                      votes\n                    })\n                    .then(docRef => {\n                      console.log(\"Document written with ID: \", docRef.id);\n                      this.setState({ postSucceeded: true });\n                    })\n                    .catch(error => {\n                      console.error(\"Error adding document: \", error);\n                    });\n                }}\n              >\n                Send inn\n              </button>\n            </React.Fragment>\n          )}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default DndVoting;\n","import React, { useState, useEffect } from \"react\";\nimport { db } from \"./Firebase\";\nimport countryList from \"./participatingCountries\";\nimport nameToCountryCode from \"./nameToCountryCode\";\n\ntype OneUsersVotes = { userName: string; votes: { [point: number]: string } };\ntype AllVotes = OneUsersVotes[];\ntype VotingState = {\n  voteTally: FinalScore;\n  usersVotes: { [country: string]: number };\n  votingUserName: string;\n  myVoteStep: number;\n};\ntype FinalScore = { [country: string]: number };\n\nconst ScoreBoard = () => {\n  const [allVotes, setAllVotes]: [AllVotes, any] = useState([]);\n  const [voteSteps, setVoteSteps]: [number, any] = useState(0);\n\n  useEffect(() => {\n    db.collection(\"user-votes\")\n      .get()\n      .then(querySnapshot => {\n        const scoresAndUsers: AllVotes = [];\n        querySnapshot.forEach(d =>\n          scoresAndUsers.push({\n            userName: d.data().userName,\n            votes: d.data().votes\n          })\n        );\n        setAllVotes(scoresAndUsers);\n      });\n  }, []);\n\n  const votingState: VotingState = allVotes.reduce(\n    (soFar: VotingState, ouv: OneUsersVotes) => {\n      try {\n        return Object.entries<string>(ouv.votes)\n          .map<[string, number]>(([points, country]) => [\n            country,\n            parseInt(points)\n          ])\n          .sort(([, points1], [, points2]) => points1 - points2)\n          .reduce<VotingState>(\n            (tempAccum: VotingState, [country, points]) =>\n              tempAccum.myVoteStep >= voteSteps\n                ? tempAccum\n                : {\n                    ...tempAccum,\n                    voteTally: {\n                      ...tempAccum.voteTally,\n                      [country]: (tempAccum.voteTally[country] || 0) + points\n                    },\n                    usersVotes:\n                      ouv.userName === tempAccum.votingUserName\n                        ? { ...tempAccum.usersVotes, [country]: points }\n                        : { [country]: points },\n                    myVoteStep: tempAccum.myVoteStep + 1,\n                    votingUserName: ouv.userName\n                  },\n\n            soFar\n          );\n      } catch (e) {\n        return soFar;\n      }\n    },\n    {\n      voteTally: countryList.reduce((soFar, a) => ({ ...soFar, [a]: 0 }), {}),\n      usersVotes: {},\n      votingUserName: \"\",\n      myVoteStep: 0\n    }\n  );\n  console.log(votingState);\n\n  console.log(allVotes);\n  return (\n    <div>\n      <h1>Resultater</h1>\n      <div>\n        <button\n          className={`nes-btn is-secondary`}\n          onClick={() => setVoteSteps(voteSteps - 1)}\n        >\n          Tilbake\n        </button>\n        <button\n          className={`nes-btn is-primary`}\n          onClick={() => setVoteSteps(voteSteps + 1)}\n        >\n          Neste\n        </button>\n      </div>\n      <div>Stemmene fra {votingState.votingUserName}</div>\n      <div>\n        <div style={{ width: \"400px\", margin: \"0 auto\" }}>\n          <table\n            className=\"nes-table is-bordered is-centered\"\n            style={{ background: \"lightblue\" }}\n          >\n            <tbody>\n              {Object.entries<number>(votingState.voteTally)\n                .sort(([, points1], [, points2]) => points2 - points1)\n                .map(([country, score]: [string, number]) => {\n                  const isLatestVote =\n                    votingState.usersVotes[country] ===\n                    Math.max(...Object.values(votingState.usersVotes));\n                  const flag = `flags/${nameToCountryCode[\n                    country\n                  ].toLowerCase()}.png`;\n                  return (\n                    <tr key={`${country} ${score}`}>\n                      <td>\n                        <img\n                          src={flag}\n                          className=\"flag\"\n                          alt={`Flag of ${country}`}\n                        />\n                        {country}\n                      </td>\n                      <td\n                        className={`nes-text ${isLatestVote && \"is-error\"}`}\n                      >\n                        {votingState.usersVotes[country] || \"\"}\n                      </td>\n                      <td>{score}</td>\n                    </tr>\n                  );\n                })}\n            </tbody>\n          </table>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default ScoreBoard;\n","import React from \"react\";\nimport \"./App.css\";\nimport Voting from \"./Voting\";\nimport DndVoting from \"./DndVoting\";\nimport ScoreBoard from \"./ScoreBoard\";\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\n\nconst App: React.FC = () => {\n  return (\n    <div className=\"App\">\n      <Router basename={process.env.PUBLIC_URL}>\n        <Route path=\"/\" exact component={DndVoting} />\n        <Route path=\"/aoeu\" component={ScoreBoard} />\n        <Route path=\"/old\" component={Voting} />\n      </Router>\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}